<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <%- include('./style'); %>
</head>

<body>

  <button id="add-item-button">Nuevo artículo</button>
  <!-- <section class="item-container"> -->
  <!--   <div class="mdiy-textfield-filled ref-container"> -->
  <!--     <input type="text" class="_mdiy-textfield-filled-input ref-input" placeholder="Referencia"></input> -->
  <!--     <button class="_mdiy-textfield-filled-button"> -->
  <!--       <i class="bi bi-x _mdiy-textfield-filled-icon"></i> -->
  <!--     </button> -->
  <!--   </div> -->
  <!--   <div class="qty-container"> -->
  <!--     <div class="mdiy-pm"> -->
  <!--       <button class="_mdiy-pm-p"><i class="bi bi-plus"></i></button> -->
  <!--       <button class="_mdiy-pm-m"><i class="bi bi-dash"></i></button> -->
  <!--     </div> -->
  <!--     <div class="input-qty-container"> -->
  <!--       <div class="input-qty">777</div> -->
  <!--     </div> -->
  <!--     <div class="qty-badge-container mdiy-blank"> -->
  <!--     </div> -->
  <!--   </div> -->
  <!-- </section> -->
  <button id="submit-sale-button">Aceptar</button>
  <script defer>
    const IP = "<%= IP %>";
    console.log(IP);

    /**
     * @parm {Object} parentElement
     * @param {string} className
     * @returns The first child of parentElement with className
     */
    function gebcn(parentElement, className) {
      return parentElement.getElementsByClassName(className)[0];
    }

    const addItemSection = () => {
      const newSection = document.createElement("section");
      newSection.classList.add("item-container");
      newSection.innerHTML = `
    <div class="price-container">
      <div class="price-box">
        <div class="price-text">
        </div>
      </div>
    </div>
    <div class="mdiy-textfield-filled ref-container">
       <input type="text" class="_mdiy-textfield-filled-input ref-input" placeholder="Referencia"></input>
       <button class="_mdiy-textfield-filled-button ref-input-x">
         <i class="bi bi-x _mdiy-textfield-filled-icon"></i>
       </button>
     </div>
     <div class="qty-container">
       <div class="mdiy-pm">
         <button class="_mdiy-pm-p plus-button"><i class="bi bi-plus"></i></button>
         <button class="_mdiy-pm-m minus-button"><i class="bi bi-dash"></i></button>
       </div>
       <div class="input-qty-container">
         <div class="input-qty">1</div>
       </div>
       <div class="qty-badge-container mdiy-blank">
         <!-- <div class="qty-badge-limit">7764</div> -->
       </div>
     </div>
     `;
      const pButton = gebcn(newSection, "plus-button");
      const mButton = gebcn(newSection, "minus-button");
      const inputQtyDiv = gebcn(newSection, "input-qty");
      const badgeContainer = gebcn(newSection, "qty-badge-container");
      const refInput = gebcn(newSection, "ref-input");
      const xButton = gebcn(newSection, "ref-input-x");
      const priceText = gebcn(newSection, "price-text");

      xButton.addEventListener("click", () => {
        newSection.remove();
      });

      /**
       * sets badge to true
       */
      const setBadgeT = () => {
        badgeContainer.className = "qty-badge-container mdiy-true";
        badgeContainer.replaceChildren();
      };
      /**
       * sets badge to false (shows limit)
       * @param {number} limit
       */
      const setBadgeF = (limit) => {
        badgeContainer.className = "qty-badge-container mdiy-error";
        const limitDiv = document.createElement("div");
        limitDiv.className = "qty-badge-limit";
        limitDiv.innerText = `${limit}`;
        badgeContainer.replaceChildren(limitDiv);
      };
      /**
       * Sets the badge to error staet
       */
      const setBadgeE = () => {
        badgeContainer.className = "qty-badge-container mdiy-error";
        const xIcon = document.createElement("i");
        xIcon.className = "bi bi-x qty-badge-error";
        badgeContainer.replaceChildren(xIcon);
      };

      /**
       * Sets item price
       * @param {number} priceInt Price in cents as int
       */
      const setPrice = (priceInt) => {
        const units = Math.floor(priceInt / 100)
        const cents = priceInt - (Math.floor(priceInt/100) * 100)
        priceText.innerText = "$" + `${units}.${(cents < 10) ? "0" : ""}${cents}`;
      }
      /**
       * empties priceText
       */
      const voidPrice = () => {
        priceText.innerText = "";
      }

      function validateItem() {
        fetch(`/validate-item`, {
          headers: {
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify({
            ref: refInput.value,
            qty: parseInt(inputQtyDiv.innerText),
          }),
        })
          .then(
            (response) => {
              return response.json();
            },
            (e) => {
              setBadgeE();
              voidPrice();
              console.error(e);
            },
          )
          .then(
            (json) => {
              console.log(json);
              if (json.hasError) {
                alert(json.errorMessage);
                setBadgeE();
                voidPrice();
              } else if (json.exists) {
                if (json.qty >= parseInt(inputQtyDiv.innerText)) {
                  setBadgeT();
                } else {
                  setBadgeF(json.qty);
                }
                setPrice(json.price);
              } else {
                setBadgeE();
                voidPrice();
              }
            },
            (e) => {
              setBadgeE();
              voidPrice();
              console.error(e);
            },
          );
      }

      pButton.addEventListener("click", () => {
        inputQtyDiv.innerText = `${parseInt(inputQtyDiv.innerText) + 1}`;
        validateItem();
      });

      mButton.addEventListener("click", () => {
        const prevText = inputQtyDiv.innerText;
        inputQtyDiv.innerText = `${prevText > 1 ? parseInt(inputQtyDiv.innerText) - 1 : prevText}`;
        validateItem();
      });

      refInput.addEventListener("input", () => {
        refInput.value = refInput.value.trim();
        refInput.value = refInput.value.toUpperCase();
        validateItem();
      });

      document.body.appendChild(newSection);

      return {
        pButton: pButton,
        mButton: mButton,
        inputQtyDiv: inputQtyDiv,
        badgeContainer: badgeContainer,
        refInput: refInput,
      };
    };

    /**
     * If the last ref input is empty, appends a new one,
     * if not, focuses it
     * TODO: Combine == refs and sum their prices on enter
     */
    const crEvent = () => {

      /** 
       * iterate this thing on all unique refs
       * @param {string} ref
       */
      const reduceRef = (ref) => {
        const allSections = document.getElementsByClassName("item-container");
        const filtered = Array.from(allSections).filter((s) => {
          return (s.getElementsByClassName("ref-input")[0].value == ref)
        });
        console.log(filtered);

        if (filtered.length > 1) {
          const finalQtyDiv = filtered[0].getElementsByClassName("input-qty")[0];
          for (item of filtered.slice(1)) {
            const itemQtyDiv = item.getElementsByClassName("input-qty")[0];
            finalQtyDiv.innerText = `${parseInt(finalQtyDiv.innerText) + parseInt(itemQtyDiv.innerText)}`;
            item.remove();
          }
        }
      }

      const allRefs = [... new Set( Array.from(document.getElementsByClassName("ref-input")).map((item) => {
        return item.value;
        })) ];

      allRefs.forEach(reduceRef);
      
      const allInputs = document.getElementsByClassName("ref-input");
      if (allInputs.length > 0 && !allInputs[allInputs.length - 1].value) {
        allInputs[allInputs.length - 1].focus();
      } else {
        const {refInput} = addItemSection();
        refInput.focus();
      }
    };

    /** NOTE: add-item-button and CR cause crEvent */
    document.getElementById("add-item-button").addEventListener("click", crEvent);

    document.addEventListener("keydown", function onEvent(event) {
      if (event.key === "Enter") {
        crEvent();
      }
    });

    /** INFO: Submit button and final validation */
    document.getElementById("submit-sale-button").addEventListener("click", () => {
      /** @type Array<{ref: string, qty: number} */
      const sale = []
      const itemContainers = document.getElementsByClassName("item-container");
      let valid = true;
      if (itemContainers.length) {
        for (const item of itemContainers) {
          // qty-badge-container mdiy-blank
          if (
            !item
              .getElementsByClassName("qty-badge-container")[0]
              .classList.contains("mdiy-true")
          ) {
            valid = false;
          }
        }

        if (valid) {
          alert("Venta válida!");
          // INFO: submitting sale
          for (const item of itemContainers) {
            const iRef = item.getElementsByClassName("ref-input")[0].value;
            const iQty = parseInt(item.getElementsByClassName("input-qty")[0].innerText)
            const preExisting = sale.find((saleItem) => saleItem.ref == iRef);
            console.log("pre: ", preExisting);
            if (preExisting) {
              preExisting.qty += iQty
            } else {
              sale.push({
                ref: iRef,
                qty: iQty
              })
            }
          }
          console.log(sale);
        } else {
          alert("Existen artículos inválidos!");
        }
      } else {
        alert("No hay artículos!");
      }
    });
  </script>
</body>

</html>
