<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>

<body>
  <style>
    :root {
      --primary: #5fcae1;
      --primary-600: #38a4be;

      --blue-gray-50: #ECEFF1;
      --blue-gray-100: #CFD8DC;
      --blue-gray-200: #B0BEC5;
      --blue-gray-300: #90A4AE;
      --blue-gray-400: #78909C;
      --blue-gray-500: #607D8B;
      --blue-gray-600: #546E7A;
      --blue-gray-700: #455A64;
      --blue-gray-800: #37474F;
      --blue-gray-900: #263238;

      --error: #B00020;
      --true: #00E676;
    }

    *:not(i) {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif
    }

    html {
      background: black;
    }

    body {
      max-width: 500px;
      padding: 20px;
      background: white;
      display: flex;
      align-items: center;
      flex-direction: column;
      gap: 30px;
    }

    #BUTTON {
      width: 100%;
      height: 80px;
      font-size: 56px;
      outline: none;
      border: none;
      border-radius: 5px;
      background-color: var(--blue-gray-50);
      color: var(--blue-gray-200);
    }

    .ref-container: {
      width: 100%;
    }

    .mdiy-error {
      background-color: var(--error) !important;
    }

    .mdiy-true {
      background-color: var(--true) !important;
    }

    .mdiy-blank {
      background-color: var(--primary) !important;
    }

    .mdiy-textfield-filled {
      box-sizing: border-box;
      height: 80px;
      padding: 0;
      display: flex;
      align-items: center;
    }

    ._mdiy-textfield-filled-input {
      background: var(--blue-gray-50);
      border: none;
      border-bottom: 4px solid var(--primary);
      border-radius: 30px 5px 0px 0px;
      box-sizing: border-box;
      color: var(--blue-gray-700);
      font-size: 30px;
      height: 100%;
      margin: 0;
      outline: none;
      overflow: hidden;
      padding: 0 20px;
      width: calc(100% - 80px);
    }

    ._mdiy-textfield-filled-button {
      display: inline-block;
      font-size: inherit;
      height: 80px;
      margin-left: 5px;
      top: 0;
      width: 80px;
      border-radius: 5px 5px 30px 5px;
      border: none;
      background-color: var(--blue-gray-50);
    }

    ._mdiy-textfield-filled-button:hover {
      background-color: var(--blue-gray-200);
    }

    ._mdiy-textfield-filled-button:active {
      background-color: var(--blue-gray-500);
    }

    .qty-container {
      margin-top: 20px;
      box-sizing: border-box;
      display: flex;
      flex-direction: row;
      width: 100%;
      gap: 15px;
    }

    ._mdiy-textfield-filled-icon {
      font-size: 50px;
      color: var(--blue-gray-800);
    }


    .qty-container>* {
      flex-grow: 1;
    }

    .mdiy-pm {
      height: 80px;
      width: 40%;
    }

    ._mdiy-pm-p,
    ._mdiy-pm-m {
      border: 4px solid var(--blue-gray-700);
      background: var(--blue-gray-50);
      margin: 0;
      height: 80px;
      width: 45%;
      font-size: 50px;
      color: var(--blue-gray-800);
    }

    ._mdiy-pm-p {
      border-radius: 30px 0 0 30px;
    }

    ._mdiy-pm-m {
      border-radius: 0 30px 30px 0;
    }

    .input-qty-container {
      color: white;
      height: 80px;
      border-radius: 30px;
      background-color: var(--primary-600);
      display: flex;
      justify-content: center;
      align-items: center;
      width: 20%;
      overflow: hidden;
    }

    .input-qty,
    .qty-badge-limit {
      font-size: 40px;
    }

    .input-qty {}

    .qty-badge-container {
      color: white;
      height: 80px;
      border-radius: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      width: 20%;
      overflow: hidden;
    }

    .qty-badge-limit {}

    .qty-badge-error {
      font-size: 50px;
      color: white;
    }

    .qty-badge-true {}
  </style>
  <button id="add-item-button">Nuevo art√≠culo</button>
  <!-- <section class="item-container"> -->
  <!--   <div class="mdiy-textfield-filled ref-container"> -->
  <!--     <input type="text" class="_mdiy-textfield-filled-input ref-input" placeholder="Referencia"></input> -->
  <!--     <button class="_mdiy-textfield-filled-button"> -->
  <!--       <i class="bi bi-x _mdiy-textfield-filled-icon"></i> -->
  <!--     </button> -->
  <!--   </div> -->
  <!--   <div class="qty-container"> -->
  <!--     <div class="mdiy-pm"> -->
  <!--       <button class="_mdiy-pm-p"><i class="bi bi-plus"></i></button> -->
  <!--       <button class="_mdiy-pm-m"><i class="bi bi-dash"></i></button> -->
  <!--     </div> -->
  <!--     <div class="input-qty-container"> -->
  <!--       <div class="input-qty">777</div> -->
  <!--     </div> -->
  <!--     <div class="qty-badge-container mdiy-blank"> -->
  <!--     </div> -->
  <!--   </div> -->
  <!-- </section> -->
  <button id="submit-sale-button">Aceptar</button>
  <script defer>
    const IP = "<%= IP %>";
    console.log(IP);

    /**
     * @parm {Object} parentElement
     * @param {string} className
     * @returns The first child of parentElement with className
     */
    function gebcn(parentElement, className) {
      return parentElement.getElementsByClassName(className)[0];
    }

    const addItemSection = () => {
      const newSection = document.createElement("section");
      newSection.classList.add("item-container");
      newSection.innerHTML = `
    <div class="mdiy-textfield-filled ref-container">
       <input type="text" class="_mdiy-textfield-filled-input ref-input" placeholder="Referencia"></input>
       <button class="_mdiy-textfield-filled-button">
         <i class="bi bi-x _mdiy-textfield-filled-icon"></i>
       </button>
     </div>
     <div class="qty-container">
       <div class="mdiy-pm">
         <button class="_mdiy-pm-p"><i class="bi bi-plus"></i></button>
         <button class="_mdiy-pm-m"><i class="bi bi-dash"></i></button>
       </div>
       <div class="input-qty-container">
         <div class="input-qty">0</div>
       </div>
       <!-- TODO: classes: midy-error, mdiy-blank, mdiy-true -->
       <div class="qty-badge-container mdiy-blank">
         <!-- <div class="qty-badge-limit">7764</div> -->
       </div>
     </div> `;
      const pButton = gebcn(newSection, "_mdiy-pm-p");
      const mButton = gebcn(newSection, "_mdiy-pm-m");
      const inputQtyDiv = gebcn(newSection, "input-qty");
      const badgeContainer = gebcn(newSection, "qty-badge-container");
      const refInput = gebcn(newSection, "ref-input");
      const xButton = gebcn(newSection, "_mdiy-textfield-filled-button");

      xButton.addEventListener("click", () => {
        newSection.remove();
      });

      /**
       * sets badge to true
       */
      const setBadgeT = () => {
        badgeContainer.className = "qty-badge-container mdiy-true";
        badgeContainer.replaceChildren();
      };
      /**
       * sets badge to false (shows limit)
       * @param {number} limit
       */
      const setBadgeF = (limit) => {
        badgeContainer.className = "qty-badge-container mdiy-error";
        const limitDiv = document.createElement("div");
        limitDiv.className = "qty-badge-limit";
        limitDiv.innerText = `${limit}`;
        badgeContainer.replaceChildren(limitDiv);
      };
      /**
       * Sets the badge to error staet
       */
      const setBadgeE = () => {
        badgeContainer.className = "qty-badge-container mdiy-error";
        const xIcon = document.createElement("i");
        xIcon.className = "bi bi-x qty-badge-error";
        badgeContainer.replaceChildren(xIcon);
      };

      function validateItem() {
        fetch(`/validate-item`, {
          headers: {
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify({
            ref: refInput.value,
            qty: parseInt(inputQtyDiv.innerText),
          }),
        })
          .then(
            (response) => {
              return response.json();
            },
            (e) => {
              setBadgeE();
              console.error(e);
            },
          )
          .then(
            (json) => {
              console.log(json);
              if (json.exists) {
                if (json.stock >= parseInt(inputQtyDiv.innerText)) {
                  setBadgeT();
                } else {
                  setBadgeF(json.stock);
                }
              } else {
                setBadgeE();
              }
            },
            (e) => {
              setBadgeE();
              console.error(e);
            },
          );
      }

      pButton.addEventListener("click", () => {
        inputQtyDiv.innerText = `${parseInt(inputQtyDiv.innerText) + 1}`;
        validateItem();
      });

      mButton.addEventListener("click", () => {
        const prevText = inputQtyDiv.innerText;
        inputQtyDiv.innerText = `${prevText > 0 ? parseInt(inputQtyDiv.innerText) - 1 : prevText}`;
        validateItem();
      });

      refInput.addEventListener("change", () => {
        refInput.value = refInput.value.trim();
        refInput.value = refInput.value.toUpperCase();
        validateItem();
      });

      document.body.appendChild(newSection);

      return {
        pButton: pButton,
        mButton: mButton,
        inputQtyDiv: inputQtyDiv,
        badgeContainer: badgeContainer,
        refInput: refInput,
      };
    };

    /**
     * If the last ref input is empty, appends a new one,
     * if not, focuses it
     */
    const crEvent = () => {
      const allInputs = document.getElementsByClassName("ref-input");
      if (allInputs.length > 0 && !allInputs[allInputs.length - 1].value) {
        allInputs[allInputs.length - 1].focus();
      } else {
        const {refInput} = addItemSection();
        refInput.focus();
      }
    };

    /** NOTE: add-item-button and CR cause crEvent */
    document.getElementById("add-item-button").addEventListener("click", crEvent);

    document.addEventListener("keydown", function onEvent(event) {
      if (event.key === "Enter") {
        crEvent();
      }
    });

    /** INFO: Submit button and final validation */
    document.getElementById("submit-sale-button").addEventListener("click", () => {
      const refContainers = document.getElementsByClassName("item-container");
      let valid = true;
      if (refContainers.length) {
        for (const item of refContainers) {
          // qty-badge-container mdiy-blank
          if (
            !item
              .getElementsByClassName("qty-badge-container")[0]
              .classList.contains("mdiy-true")
          ) {
            valid = false;
          }
        }

        if (valid) {
          alert("Venta v√°lida!");
        } else {
          alert("Existen art√≠culos inv√°lidos!");
        }
      } else {
        alert("No hay art√≠culos!");
      }
    });
  </script>
</body>

</html>
